version: 0.2

env:
  variables:
    ECR_REPOSITORY_NAME: "my-app"
    LAMBDA_FUNCTION_NAME: "my-app"

phases:
  pre_build:
    commands:
      - echo logging in to amazon ecr...

      # get the aws account id and region from the environment
      - AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - AWS_DEFAULT_REGION=$(aws configure get region)

      # define the name and tag for the ecr repository
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY_NAME
      - TAG=${CODEBUILD_RESOLVED_SOURCE_VERSION:-latest}

      - echo repository uri is... $REPOSITORY_URI
      - echo tag is... $TAG
      - echo lambda function is... $LAMBDA_FUNCTION_NAME

      # login to ecr
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPOSITORY_URI

  build:
    commands:
      # build docker image from the dockerfile
      - echo build started on `date`
      - echo building the docker image for lambda...

      - docker build -t $REPOSITORY_URI:latest -f Dockerfile.lambda .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$TAG

      # test the container image
      - echo testing the container locally...
      - docker run --rm -p 9000:8080 $REPOSITORY_URI:latest &
      - sleep 5
      - echo container test completed


  post_build:
    commands:
      # push the docker image to the ecr
      - echo build completed on `date`
      - echo pushing the docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$TAG

      # update lambda
      - echo updating lambda function...
      - |
        aws lambda update-function-code \
          --function-name $LAMBDA_FUNCTION_NAME \
          --image-uri $REPOSITORY_URI:$TAG \
          --region $AWS_DEFAULT_REGION
      - echo waiting for lambda function to be updated...
      - |
        aws lambda wait function-updated \
          --function-name $LAMBDA_FUNCTION_NAME \
          --region $AWS_DEFAULT_REGION
      - echo lambda function updated successfully
      - echo getting updated function info...
      - |
        aws lambda get-function \
          --function-name $LAMBDA_FUNCTION_NAME \
          --region $AWS_DEFAULT_REGION \
          --query 'Code.ImageUri' \
          --output text

      # check the scan status
      - echo ... waiting for inspector scan to complete ...
      - |
        SCAN_STATUS=$(aws ecr describe-image-scan-findings --repository-name your-repo-name --image-id imageTag=latest --query 'imageScanStatus.status' --output text)
        while [ "$SCAN_STATUS" != "COMPLETE" ]; do
          echo scan status: $SCAN_STATUS. retrying in 15 seconds...
          sleep 15
          SCAN_STATUS=$(aws ecr describe-image-scan-findings --repository-name your-repo-name --image-id imageTag=latest --query 'imageScanStatus.status' --output text)
        done
      - |
        VULNERABILITIES=$(aws ecr describe-image-scan-findings --repository-name your-repo-name --image-id imageTag=latest --query 'imageScanFindings.findingSeverityCounts' --output json)
        CRITICAL_COUNT=$(echo $VULNERABILITIES | jq -r '."CRITICAL" // 0')
        if [ "$CRITICAL_COUNT" -gt "0" ]; then
          echo critical vulnerabilities found! failing the build.
          exit 1
        else
          echo no critical vulnerabilities found. build successful.
        fi

artifacts:
  files:
    - '**/*'
