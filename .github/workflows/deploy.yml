name: Deploy Containerized Lambda

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The branch to deploy from'
        required: true
        default: 'develop'
        type: choice
        options:
          - main
          - develop

env:
  BRANCH_NAME: "main"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
    - name: checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch }}

    - name: set up python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    # configure aws credentials using oicd
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ secrets.AWS_REGION_NAME }}
        role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}

    - name: set environment variables
      run: |
        echo "BRANCH_NAME=${{ github.event.inputs.branch }}" >> $GITHUB_ENV
        echo "SHORT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV

    - name: check lambda function exists
      run: |
        aws lambda get-function --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} --region ${{ secrets.AWS_REGION_NAME }}

    - name: start codebuild for container build
      uses: aws-actions/aws-codebuild-run-build@v1
      id: codebuild
      with:
        project-name: ${{ secrets.CODEBUILD_PROJECT }}
        source-version-override: ${{ github.event.inputs.branch }}
        env-vars-for-codebuild: |
          [
            {
              "name": "GITHUB_REF",
              "value": "refs/heads/${{ github.event.inputs.branch }}"
            },
            {
              "name": "BRANCH_NAME",
              "value": "${{ env.BRANCH_NAME }}"
            },
            {
              "name": "ECR_REPOSITORY_NAME",
              "value": "${{ secrets.ECR_REPOSITORY }}"
            },
            {
              "name": "LAMBDA_FUNCTION_NAME",
              "value": "${{ secrets.LAMBDA_FUNCTION_NAME }}"
            }
          ]

    - name: verify lambda updates
      run: |
        CURRENT_IMAGE=$(aws lambda get-function \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
          --region ${{ secrets.AWS_REGION_NAME }} \
          --query 'Code.ImageUri' \
          --output text)

        if [[ $CURRENT_IMAGE == *"${{ github.event.inputs.branch }}"* ]]; then
          echo "✅ lambda function successfully updated with new image"
        else
          echo "❌ lambda function update may have failed"
          exit 1
        fi

    - name: test lambda function (optional)
      if: github.event.inputs.branch == 'main'
      run: |
        aws lambda invoke \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
          --region ${{ secrets.AWS_REGION_NAME }} \
          --payload '{"test": true}' \
          --cli-binary-format raw-in-base64-out \
          response.json

        cat response.json

    - name: update lambda environment variables (if needed)
      if: github.event.inputs.branch == 'main'
      run: |
        aws lambda update-function-configuration \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
          --region ${{ secrets.AWS_REGION_NAME }} \
          --environment Variables='{
            "ENVIRONMENT": "production",
            "VERSION": "${{ github.sha }}",
            "DEPLOY_TIME": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
          }'
